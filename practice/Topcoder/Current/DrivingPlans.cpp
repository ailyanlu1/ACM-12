// BEGIN CUT HERE
/*

*/
// END CUT HERE
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <iostream>
#include <sstream>
#include <algorithm>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <bitset>
using namespace std;
typedef long long LL;
typedef pair<int, int> PII;
typedef pair<long, long> PLL;

#define PB push_back
#define PF push_front
#define PPB pop_back
#define PPF pop_front
#define MP make_pair
#define AA first
#define BB second
#define SZ size()
#define BG begin()
#define ED end()
#define SQ(x) ((x)*(x))
#define cmax(x, y) x = max(x, y)
#define cmin(x, y) x = min(x, y)
#define SORT(g) sort(g.BG, g.ED)
#define MEM(a,b) memset(a,b,sizeof(a))
#define REVERSE(g) reverse(g.BG,g.ED)
#define REVERSE(g,l,r) reverse(g, g.BG + i, g.ED + i)
#define SBUSTR(S,l,r) S.substr(l, (r)-(l))

typedef vector<int> VI;
typedef vector<PII> VII;
typedef deque<int> QI;
typedef deque<PII> QII;
typedef vector<LL> VL;
typedef vector<PLL> VLL;
typedef deque<LL> QL;
typedef deque<PLL> QLL;
typedef vector<string> VS;
typedef deque<string> QS;

const double eps = 1e-8;
const LL MOD = 1000000009;

struct node {
    int u, v, l, next;
} e[5000];
#define Maxn 2010
int tot, last[Maxn];
int dist[Maxn], visit[Maxn];
int dis1[Maxn], disn[Maxn];
LL cnt[Maxn];
int n, m, ans;

void adde(int u, int v, int l) {
    if(v == 50 || u == 50)
//    cout << "adde " << u << " ~ " << v << " " << l << endl;
    e[tot].u = u;
    e[tot].v = v;
    e[tot].l = l;
    e[tot].next = last[u];
    last[u] = tot++;
    e[tot].u = v;
    e[tot].v = u;
    e[tot].l = l;
    e[tot].next = last[v];
    last[v] = tot++;
}

void spfa1(int o) {
//    cout << "spfa1 " << o << endl;
    int i, j;
    priority_queue<PII> Q;
    while(!Q.empty()) Q.pop();
    for(i = 1; i <= n; i++) {
        dist[i] = MOD;
    }
    Q.push(MP(0, o));
    dist[o] = 0;
    while(!Q.empty()) {
        int u = Q.top().BB, d = -Q.top().AA;
        Q.pop();
        if(d != dist[u]) continue;
//        cout << "1 " << u << endl;
        for(j = last[u]; j != -1; j = e[j].next) {
            int v = e[j].v;
//            cout << "1 v " << v <<endl;
            if(dist[v] > dist[u] + e[j].l) {
                dist[v] = dist[u] + e[j].l;
                Q.push(MP(-dist[v], v));
            }
        }
    }
}

void spfa2(int o) {
    int i, j;
    priority_queue<PII> Q;
    while(!Q.empty()) Q.pop();
    for(i = 1; i <= n; i++) {
        visit[i] = false;
        dist[i] = MOD;
        cnt[i] = 0;
    }
    dist[o] = 0;
    visit[o] = true;
    cnt[o] = 1;
    Q.push(MP(0, o));
    while(!Q.empty()) {
        int u = Q.top().BB, d = -Q.top().AA;
        Q.pop();
        visit[u] = false;
//        cout << "2 " << u << endl;
        for(j = last[u]; j != -1; j = e[j].next) {
            if(e[j].l == 0) continue;
            int v = e[j].v;
            int tp = dis1[u] + e[j].l;
            int flag = false;
            if(dis1[v] == tp) {
//                cout << "+ " << u << " ! " << v << endl;
                cnt[v] += cnt[u];
                flag = true;
            }
//            cout << "2 " << u << " " << v << " " << flag << endl;
            if(flag) {
                cnt[v] %= MOD;
                if(!visit[v]) {
                    Q.push(MP(-dis1[v], v));
                    visit[v] = true;
                }
            }
        }
    }
}

void dfs(int u, int d) {
    if(d > dis1[u] || d > dis1[n]) return;
    if(u == n) {
        ans++;
    }
    for(int j = last[u]; j != -1; j = e[j].next)  {
        if(e[j].l == 0) continue;
        int v = e[j].v;
        if(dis1[v] == d + e[j].l) {
            dfs(v, d + e[j].l);
        }
    }
}

void pai() {
    ans = 0;
    dfs(1, 0);
    cout << "ans = " << ans << endl;
}

class DrivingPlans
{
public:
    int count (int N, vector <int> A, vector <int> B, vector <int> C)
    {
        int i, j;
        int ret = 0;
        n = N;
        m = A.SZ;
        tot = 0;
        for(i = 1; i <= n; i++) last[i] = -1;
        for(i = 0; i < m; i++) {
            adde(A[i], B[i], C[i]);
        }
        spfa1(1);
        for(j = 1; j <= n; j++) {
            dis1[j] = dist[j];
        }
        spfa1(n);
        for(j = 1; j <= n; j++) {
            disn[j] = dist[j];
        }
//        for(i = 1; i <= n; i++) cout << "dis1[" << i << "] " << dis1[i] << endl;
        int flag = false;
        for(i = 0; i < m; i++) {
            if(C[i] == 0) {
                if(dis1[n] == min(dis1[A[i]] + disn[B[i]], dis1[B[i]] + disn[A[i]])) {
                    flag = true;
                    break;
                }
            }
        }
//        cout << flag << endl;
        if(flag) {
            ret = -1;
        }
        else {
            spfa2(1);
            ret = cnt[n];
//            for(i = 1; i <= n; i++) cout << "cnt[" << i << "] " << cnt[i] << endl;
        }
        return (int)(ret);
    }
};

// BEGIN CUT HERE
#include <cstdio>
#include <ctime>
#include <iostream>
#include <string>
#include <vector>
namespace moj_harness {
	using std::string;
	using std::vector;
	int run_test_case(int);
	void run_test(int casenum = -1, bool quiet = false) {
		if (casenum != -1) {
			if (run_test_case(casenum) == -1 && !quiet) {
				std::cerr << "Illegal input! Test case " << casenum << " does not exist." << std::endl;
			}
			return;
		}

		int correct = 0, total = 0;
		for (int i=0;; ++i) {
			int x = run_test_case(i);
			if (x == -1) {
				if (i >= 100) break;
				continue;
			}
			correct += x;
			++total;
		}

		if (total == 0) {
			std::cerr << "No test cases run." << std::endl;
		} else if (correct < total) {
			std::cerr << "Some cases FAILED (passed " << correct << " of " << total << ")." << std::endl;
		} else {
			std::cerr << "All " << total << " tests passed!" << std::endl;
		}
	}

	int verify_case(int casenum, const int &expected, const int &received, std::clock_t elapsed) {
		std::cerr << "Example " << casenum << "... ";

		string verdict;
		vector<string> info;
		char buf[100];

		if (elapsed > CLOCKS_PER_SEC / 200) {
			std::sprintf(buf, "time %.2fs", elapsed * (1.0/CLOCKS_PER_SEC));
			info.push_back(buf);
		}

		if (expected == received) {
			verdict = "PASSED";
		} else {
			verdict = "FAILED";
		}

		std::cerr << verdict;
		if (!info.empty()) {
			std::cerr << " (";
			for (size_t i=0; i<info.size(); ++i) {
				if (i > 0) std::cerr << ", ";
				std::cerr << info[i];
			}
			std::cerr << ")";
		}
		std::cerr << std::endl;

		if (verdict == "FAILED") {
			std::cerr << "    Expected: " << expected << std::endl;
			std::cerr << "    Received: " << received << std::endl;
		}

		return verdict == "PASSED";
	}

	int run_test_case(int casenum__) {
		switch (casenum__) {
		case 0: {
			int N                     = 4;
			int A[]                   = {1,1,2,3};
			int B[]                   = {2,3,4,4};
			int C[]                   = {1,1,1,1};
			int expected__            = 2;

			std::clock_t start__      = std::clock();
			int received__            = DrivingPlans().count(N, vector <int>(A, A + (sizeof A / sizeof A[0])), vector <int>(B, B + (sizeof B / sizeof B[0])), vector <int>(C, C + (sizeof C / sizeof C[0])));
			return verify_case(casenum__, expected__, received__, clock()-start__);
		}
		case 1: {
			int N                     = 4;
			int A[]                   = {1,1,2,3};
			int B[]                   = {2,3,4,4};
			int C[]                   = {1,1,1,0};
			int expected__            = -1;

			std::clock_t start__      = std::clock();
			int received__            = DrivingPlans().count(N, vector <int>(A, A + (sizeof A / sizeof A[0])), vector <int>(B, B + (sizeof B / sizeof B[0])), vector <int>(C, C + (sizeof C / sizeof C[0])));
			return verify_case(casenum__, expected__, received__, clock()-start__);
		}
		case 2: {
			int N                     = 7;
			int A[]                   = {1,1,2,3,4,4,5,6};
			int B[]                   = {2,3,4,4,5,6,7,7};
			int C[]                   = {1,1,2,2,3,3,4,4};
			int expected__            = 4;

			std::clock_t start__      = std::clock();
			int received__            = DrivingPlans().count(N, vector <int>(A, A + (sizeof A / sizeof A[0])), vector <int>(B, B + (sizeof B / sizeof B[0])), vector <int>(C, C + (sizeof C / sizeof C[0])));
			return verify_case(casenum__, expected__, received__, clock()-start__);
		}

		// custom cases

      case 3: {
			int N                     = 10;
			int A[]                   = {10, 10, 2, 9, 9, 1, 3, 10, 9, 2, 3, 8, 8, 9, 3, 4, 10, 5, 4, 7, 9, 8, 3, 5, 2, 4, 7, 7, 3, 6, 1, 1, 6, 2, 2, 2, 8, 10, 1, 2, 7, 6, 10, 8, 6};
			int B[]                   = {4, 5, 5, 5, 6, 4, 7, 8, 7, 3, 1, 4, 7, 10, 4, 6, 2, 8, 9, 4, 3, 1, 6, 7, 4, 5, 6, 1, 5, 1, 9, 2, 5, 7, 8, 6, 9, 3, 5, 9, 10, 8, 1, 3, 10};
			int C[]                   = {77707, 35745, 28635, 59760, 94579, 44690, 4066, 71743, 68587, 33396, 2033, 5964, 44825, 95505, 46723, 76781, 64380, 35998, 17798, 50789, 64521, 38726, 30058, 8827, 13327, 41962, 25992, 6099, 4761, 32091, 62488, 31363, 34819, 37462, 7363, 63454, 23762, 30984, 2728, 31125, 26918, 70817, 33017, 40759, 926};
			int expected__            = 8;

			std::clock_t start__      = std::clock();
			int received__            = DrivingPlans().count(N, vector <int>(A, A + (sizeof A / sizeof A[0])), vector <int>(B, B + (sizeof B / sizeof B[0])), vector <int>(C, C + (sizeof C / sizeof C[0])));
			return verify_case(casenum__, expected__, received__, clock()-start__);
		}
      case 4: {
			int N                     = 50;
			int A[]                   = {38, 48, 37, 16, 10, 12, 12, 2, 22, 50, 6, 49, 35, 29, 36, 2, 30, 45, 10, 26, 40, 14, 7, 15, 13, 38, 48, 30, 8, 4, 19, 37, 20, 3, 46, 18, 2, 19, 9, 39, 8, 43, 25, 22, 2, 27, 43, 23, 5, 40, 19, 39, 36, 5, 7, 38, 20, 18, 14, 21, 33, 1, 24, 11, 18, 20, 33, 48, 7, 24, 15, 11, 31, 36, 43, 46, 41, 32, 39, 19, 45, 36, 14, 20, 28, 6, 27, 23, 10, 22, 20, 34, 2, 19, 23, 35, 41, 13, 24, 6, 12, 25, 29, 23, 44, 7, 35, 8, 35, 50, 33, 17, 5, 39, 42, 37, 31, 38, 6, 37, 46, 19, 43, 23, 44, 10, 13, 20, 30, 21, 14, 44, 20, 27, 27, 45, 36, 47, 5, 48, 34, 40, 8, 22, 23, 46, 15, 12, 14, 31, 24, 44, 8, 31, 27, 12, 31, 3, 38, 2, 25, 22, 49, 3, 33, 40, 27, 4, 42, 23, 10, 21, 40, 22, 48, 22, 29, 32, 42, 12, 6, 35, 37, 13, 15, 24, 2, 35, 30, 32, 7, 40, 23, 10, 34, 33, 29, 26, 42, 10, 30, 4, 19, 46, 6, 49, 41, 37, 44, 12, 14, 40, 42, 46, 24, 14, 5, 37, 44, 12, 15, 6, 26, 17, 3, 25, 46, 29, 5, 13, 40, 13, 3, 22, 34, 9, 19, 21, 13, 9, 16, 39, 17, 44, 11, 42, 19, 6, 22, 9, 34, 13, 29, 1, 23, 16, 8, 34, 22, 18, 7, 48, 31, 18, 39, 2, 43, 8, 36, 25, 30, 5, 37, 13, 1, 24, 11, 29, 30, 10, 36, 34, 23, 24, 16, 19, 32, 33, 16, 27, 26, 31, 22, 6, 32, 47, 15, 17, 16, 23, 38, 43, 45, 9, 14, 7, 9, 44, 44, 32, 12, 44, 39, 1, 12, 45, 17, 40, 40, 36, 31, 18, 13, 45, 20, 23, 2, 3, 38, 9, 32, 40, 34, 10, 11, 15, 4, 10, 1, 23, 11, 27, 44, 8, 16, 50, 14, 37, 40, 45, 2, 46, 8, 10, 41, 50, 48, 45, 3, 50, 31, 16, 36, 35, 5, 29, 5, 12, 32, 15, 33, 34, 22, 21, 42, 29, 36, 31, 15, 24, 5, 44, 35, 44, 26, 32, 36, 11, 3, 33, 27, 9, 28, 12, 4, 12, 22, 30, 5, 26, 24, 31, 45, 9, 10, 16, 34, 7, 18, 5, 34, 28, 35, 10, 3, 35, 29, 17, 5, 13, 49, 35, 20, 17, 24, 34, 8, 13, 18, 8, 30, 42, 39, 2, 23, 29, 11, 7, 38, 7, 40, 32, 44, 12, 14, 39, 32, 48, 31, 29, 19, 22, 21, 2, 40, 30, 38, 26, 40, 16, 50, 16, 28, 6, 16, 42, 42, 31, 34, 8, 35, 47, 18, 13, 10, 30, 14, 47, 49, 7, 2, 1, 45, 32, 35, 49, 3, 31, 2, 38, 46, 29, 24, 48, 29, 26, 47, 22, 42, 4, 15, 40, 16, 12, 9, 31, 15, 2, 31, 20, 37, 37, 36, 11, 48, 21, 23, 37, 21, 36, 4, 45, 19, 38, 3, 27, 29, 5, 5, 30, 31, 36, 27, 43, 27, 17, 44, 41, 2, 10, 44, 44, 46, 8, 40, 22, 18, 14, 18, 13, 27, 32, 7, 34, 3, 15, 11, 42, 16, 22, 50, 45, 40, 12, 44, 31, 7, 11, 18, 29, 49, 30, 15, 50, 19, 48, 25, 29, 20, 7, 10, 49, 49, 33, 13, 2, 33, 18, 37, 13, 3, 21, 35, 34, 17, 13, 11, 32, 36, 22, 5, 25, 2, 7, 7, 22, 29, 50, 39, 6, 33, 29, 28, 18, 11, 2, 19, 45, 37, 35, 43, 32, 33, 9, 29, 33, 27, 31, 17, 34, 6, 28, 32, 14, 46, 7, 46, 28, 23, 13, 33, 35, 13, 14, 39, 39, 24, 47, 14, 48, 49, 7, 24, 13, 1, 43, 39, 1, 40, 30, 13, 20, 23, 30, 48, 24, 37, 49, 29, 22, 11, 20, 41, 32, 33, 24, 21, 28, 28, 31, 41, 11, 41, 34, 1, 30, 26, 48, 17, 2, 1, 30, 45, 33, 18, 17, 2, 33, 33, 4, 23, 5, 6, 40, 4, 18, 29, 39, 41, 13, 49, 27, 1, 9, 4, 23, 50, 23, 24, 10, 38, 38, 50, 26, 2, 49, 22, 41, 3, 18, 39, 6, 30, 5, 4, 4, 6, 16, 31, 36, 7, 43, 17, 8, 5, 6, 5, 9, 2, 12, 6, 23, 48, 38, 9, 33, 23, 36, 20, 17, 34, 27, 21, 36, 1, 22, 1, 4, 15, 27, 35, 44, 16, 8, 50, 6, 7, 42, 39, 5, 21, 6, 20, 13, 36, 28, 20, 25, 37, 12, 41, 38, 10, 23, 3, 20, 10, 1, 39, 9, 33, 9, 9, 50, 43, 38, 12, 11, 40, 36, 48, 50, 4, 25, 1, 28, 24, 48, 20, 25, 2, 34, 47, 47, 14, 21, 48, 38, 32, 43, 47, 34, 49, 25, 35, 20, 28, 6, 42, 40, 27, 46, 17, 2, 26, 44, 41, 25, 3, 1, 32, 24, 19, 49, 19, 13, 1, 4, 25, 6, 24, 13, 35, 28, 39, 41, 20, 12, 31, 21, 36, 41, 41, 10, 13, 9, 32, 13, 6, 47, 2, 15, 44, 30, 18, 44, 39, 48, 8, 1, 12, 29, 12, 8, 27, 25, 41, 20, 41, 44, 7, 32, 39, 21, 30, 28, 16, 8, 48, 32, 47, 30, 17, 28, 25, 10, 4, 6, 37, 21, 30, 15, 23, 31, 15, 5, 20, 30, 33, 1, 13, 21, 22, 28, 37, 50, 42, 23, 28, 24, 24, 49, 28, 39, 42, 35, 17, 34, 28, 50, 30, 33, 11, 22, 11, 6, 15, 14, 44, 43, 15, 3, 46, 45, 18, 23, 9, 12, 5, 8, 8, 34, 7, 4, 16, 1, 5, 12, 14, 33, 22, 18, 10, 6, 25, 9, 18, 5, 39, 11, 46, 40, 11, 46, 37, 26, 32, 32, 26, 11, 47, 32, 9, 27, 20, 15, 23, 39, 47, 19, 42, 5, 43, 34, 28, 47, 4, 10, 2, 13, 7, 1, 43, 22, 10, 32, 6, 40, 41, 35, 5, 26, 42, 7, 29, 12, 50, 18, 46, 24, 36, 41, 9, 17, 27, 17, 8, 47, 37, 2, 2, 37, 47, 13, 7, 25, 25, 6, 12, 21, 32, 42, 39, 50, 48, 5, 16, 2, 23, 30, 36, 37, 46, 50, 4, 50, 21, 48, 45, 44, 50, 40, 27, 36, 36, 27, 46, 34, 34, 49, 1, 8, 32, 46, 34, 36, 38, 17, 45, 1, 48, 23, 1, 11, 29, 11, 17, 46, 12, 11, 43, 19, 19, 40, 32, 23, 49, 42, 14, 37, 25, 38, 9, 7, 41, 1, 15, 10, 19, 49, 37, 48, 5, 4, 4, 2, 49, 5, 1, 1, 35, 40, 31, 13, 15, 6, 40, 26, 35, 31, 34, 35, 39, 36, 36, 48, 12, 38, 16, 23, 4, 29, 2, 49, 6, 38, 46, 27, 50, 46, 13, 41, 19, 18, 36, 38, 33, 19, 6, 36, 14, 42, 7, 46, 49, 50, 12, 37, 14, 21, 39, 21, 29, 9, 9, 44, 29, 18, 49, 6, 43, 30, 3, 12, 50, 34, 28, 43, 45, 47, 34, 11, 18, 36, 39, 13, 33, 25, 24, 39, 13, 1, 8, 38, 31};
			int B[]                   = {44, 40, 38, 38, 14, 31, 34, 35, 39, 17, 27, 18, 32, 2, 3, 11, 18, 9, 1, 37, 41, 28, 50, 31, 16, 28, 8, 16, 11, 45, 3, 40, 1, 47, 7, 24, 27, 48, 36, 42, 25, 16, 7, 44, 15, 33, 21, 27, 21, 9, 2, 50, 31, 34, 8, 3, 15, 5, 9, 16, 35, 40, 20, 14, 25, 36, 4, 27, 33, 36, 26, 17, 49, 23, 10, 18, 29, 18, 30, 34, 19, 6, 46, 28, 30, 5, 5, 3, 49, 16, 17, 6, 47, 5, 20, 30, 3, 25, 43, 44, 1, 42, 33, 46, 12, 16, 47, 23, 44, 38, 18, 40, 50, 32, 8, 3, 16, 29, 47, 16, 10, 6, 42, 7, 10, 47, 48, 26, 45, 45, 35, 17, 9, 43, 17, 10, 7, 14, 30, 12, 45, 29, 32, 15, 9, 40, 12, 47, 30, 33, 40, 2, 40, 11, 4, 25, 35, 24, 26, 49, 4, 47, 26, 34, 36, 35, 22, 20, 41, 25, 39, 41, 14, 42, 31, 43, 37, 22, 30, 5, 23, 17, 19, 45, 8, 47, 37, 5, 50, 41, 28, 20, 40, 37, 46, 30, 31, 50, 9, 17, 4, 31, 14, 19, 49, 48, 14, 41, 30, 30, 31, 26, 38, 21, 5, 36, 29, 7, 25, 50, 29, 8, 10, 8, 20, 10, 6, 21, 32, 17, 12, 30, 25, 50, 8, 50, 13, 22, 50, 17, 17, 23, 39, 20, 5, 34, 12, 24, 9, 6, 30, 9, 44, 13, 21, 41, 49, 23, 17, 3, 17, 2, 2, 43, 18, 25, 14, 47, 16, 47, 10, 48, 6, 21, 48, 22, 27, 19, 22, 27, 1, 37, 33, 37, 10, 25, 1, 48, 23, 8, 46, 43, 1, 15, 7, 23, 4, 42, 26, 17, 9, 8, 33, 16, 18, 45, 30, 43, 46, 15, 14, 19, 24, 28, 28, 3, 37, 7, 42, 13, 10, 27, 3, 29, 21, 12, 23, 2, 32, 46, 27, 50, 24, 12, 25, 50, 32, 18, 5, 5, 19, 45, 48, 2, 32, 24, 26, 46, 28, 37, 17, 3, 45, 50, 47, 41, 34, 16, 8, 42, 45, 49, 47, 27, 33, 42, 36, 8, 40, 49, 38, 35, 5, 1, 44, 20, 44, 21, 46, 4, 41, 1, 15, 33, 28, 19, 15, 23, 12, 37, 26, 33, 10, 33, 3, 42, 3, 31, 47, 48, 46, 18, 20, 19, 38, 39, 32, 43, 13, 45, 28, 11, 45, 15, 17, 50, 14, 12, 20, 27, 14, 24, 47, 14, 28, 25, 31, 44, 28, 35, 41, 49, 46, 18, 43, 17, 35, 26, 19, 22, 39, 29, 27, 20, 32, 19, 49, 16, 44, 13, 50, 13, 19, 9, 3, 47, 43, 2, 15, 14, 27, 28, 45, 41, 25, 26, 1, 24, 47, 50, 12, 27, 50, 6, 2, 43, 45, 31, 11, 14, 16, 43, 12, 36, 26, 27, 7, 7, 43, 13, 48, 25, 49, 35, 8, 3, 40, 45, 10, 17, 38, 38, 47, 37, 8, 42, 14, 21, 22, 25, 21, 8, 40, 20, 20, 27, 19, 22, 26, 39, 48, 32, 33, 36, 43, 14, 6, 49, 38, 1, 39, 22, 41, 26, 20, 28, 3, 38, 4, 8, 28, 9, 35, 20, 44, 26, 45, 3, 37, 31, 36, 2, 9, 2, 1, 47, 18, 37, 18, 46, 31, 50, 45, 36, 34, 19, 21, 9, 47, 27, 44, 11, 37, 11, 4, 42, 33, 3, 18, 18, 33, 21, 39, 11, 49, 33, 6, 19, 14, 24, 16, 44, 18, 9, 47, 20, 48, 42, 30, 28, 8, 14, 39, 42, 15, 35, 1, 3, 43, 43, 22, 35, 43, 6, 1, 28, 26, 6, 23, 38, 36, 25, 47, 3, 36, 16, 24, 23, 5, 21, 35, 25, 26, 38, 20, 11, 32, 23, 45, 26, 49, 1, 43, 42, 41, 33, 26, 37, 4, 29, 50, 41, 42, 47, 14, 20, 21, 26, 21, 29, 7, 22, 15, 21, 21, 19, 31, 38, 46, 4, 26, 34, 45, 47, 50, 16, 33, 15, 46, 17, 12, 12, 43, 41, 27, 24, 8, 28, 26, 38, 37, 7, 1, 40, 17, 21, 46, 46, 17, 26, 35, 44, 48, 25, 43, 42, 28, 25, 9, 34, 36, 30, 24, 15, 42, 10, 37, 32, 9, 35, 27, 21, 34, 25, 41, 9, 34, 17, 48, 41, 3, 14, 6, 7, 46, 47, 3, 44, 38, 34, 27, 15, 46, 14, 40, 4, 16, 48, 30, 43, 26, 48, 30, 11, 31, 26, 18, 11, 42, 32, 43, 25, 47, 41, 15, 6, 34, 39, 21, 16, 39, 24, 4, 44, 46, 42, 38, 45, 28, 26, 36, 50, 7, 8, 46, 21, 39, 22, 25, 32, 15, 34, 19, 4, 11, 10, 11, 16, 8, 12, 24, 35, 4, 44, 45, 18, 27, 4, 27, 18, 17, 4, 5, 5, 19, 4, 14, 47, 37, 45, 14, 27, 38, 43, 13, 24, 10, 12, 28, 5, 49, 31, 29, 31, 41, 32, 37, 1, 23, 2, 19, 16, 24, 20, 29, 4, 24, 35, 27, 8, 37, 23, 47, 43, 42, 40, 23, 12, 38, 16, 7, 11, 3, 6, 15, 22, 35, 49, 6, 10, 10, 31, 11, 7, 15, 32, 3, 2, 7, 44, 24, 45, 45, 40, 29, 7, 47, 32, 18, 4, 24, 4, 22, 33, 15, 48, 48, 31, 28, 15, 19, 6, 44, 42, 38, 13, 15, 41, 14, 44, 26, 25, 38, 49, 15, 24, 7, 25, 35, 8, 37, 30, 13, 40, 33, 28, 19, 19, 20, 9, 46, 32, 40, 19, 11, 29, 3, 29, 3, 15, 11, 35, 31, 14, 46, 16, 25, 16, 8, 43, 26, 43, 42, 10, 39, 10, 3, 44, 26, 25, 19, 21, 49, 11, 34, 26, 18, 29, 2, 16, 36, 29, 35, 35, 20, 38, 15, 13, 34, 41, 14, 15, 3, 17, 49, 10, 4, 13, 45, 16, 41, 16, 29, 11, 49, 45, 31, 43, 9, 34, 42, 50, 43, 31, 14, 11, 22, 6, 46, 40, 33, 31, 17, 39, 33, 28, 41, 5, 42, 41, 34, 7, 29, 18, 29, 10, 38, 34, 20, 21, 14, 41, 5, 39, 16, 39, 28, 44, 25, 32, 35, 25, 37, 1, 28, 45, 4, 45, 4, 12, 7, 48, 9, 10, 29, 24, 1, 2, 26, 11, 33, 28, 13, 47, 38, 39, 19, 45, 14, 20, 42, 5, 8, 20, 38, 48, 25, 22, 48, 41, 16, 10, 37, 19, 4, 39, 27, 4, 33, 22, 47, 38, 30, 45, 26, 17, 20, 30, 24, 39, 15, 49, 31, 44, 47, 43, 49, 1, 7, 6, 46, 41, 17, 18, 11, 30, 20, 35, 33, 44, 50, 23, 27, 47, 49, 49, 34, 41, 22, 19, 43, 36, 3, 21, 40, 22, 3, 9, 50, 18, 28, 49, 3, 4, 17, 20, 11, 39, 19, 26, 17, 43, 48, 2, 45, 24, 16, 24, 42, 41, 10, 22, 1, 7, 40, 45, 5, 42, 2, 38, 35, 1, 43, 26, 37, 22, 13, 8, 21, 28, 21, 15, 48, 30, 4, 23, 46, 13, 50, 50, 9, 12, 24, 25, 21, 23, 9, 48, 30, 12, 48, 8, 30, 18, 36, 10, 9, 40, 49, 11, 49, 22, 21, 26, 37, 32, 3, 36, 8, 29, 42, 33, 22, 39, 46};
			int C[]                   = {58049, 46063, 73628, 41873, 22383, 63512, 75941, 77747, 14557, 24272, 29473, 3707, 78023, 72916, 81806, 75230, 30867, 63476, 5815, 9565, 59448, 64720, 48600, 23756, 45293, 2731, 3700, 3642, 56600, 41487, 74612, 54502, 8349, 84335, 10032, 8720, 48817, 17402, 79250, 15663, 57175, 10257, 4282, 36829, 46932, 42259, 33131, 9765, 32350, 8591, 4929, 20256, 25442, 25423, 61458, 7979, 9683, 43986, 56916, 22874, 71190, 20127, 14821, 55162, 4350, 58881, 48438, 26488, 73530, 73702, 42607, 68015, 60686, 41318, 7063, 10101, 63971, 80431, 2454, 5819, 8581, 80556, 49988, 28174, 35500, 42120, 12648, 40488, 41411, 20654, 49400, 67544, 4796, 31243, 17564, 28460, 70595, 15134, 36046, 48821, 38422, 8401, 66358, 31004, 57219, 34441, 82543, 20422, 48278, 56032, 73597, 61179, 4684, 52018, 48776, 65649, 22470, 14603, 83085, 31755, 27604, 73363, 32017, 41035, 12982, 47246, 68610, 52290, 35781, 55013, 57679, 22256, 20370, 13428, 41602, 28943, 82353, 24863, 13118, 64359, 2762, 4523, 18907, 19368, 37932, 1662, 39756, 91484, 29221, 16619, 3042, 29470, 49763, 52054, 6179, 10883, 54572, 8105, 83194, 83862, 20811, 71094, 79536, 68793, 8825, 9355, 17483, 1620, 58461, 36753, 9291, 59576, 48325, 1106, 846, 30911, 59025, 66575, 18118, 50518, 39239, 70532, 8963, 77432, 28303, 76231, 13891, 41577, 17801, 9222, 4701, 11779, 29341, 28561, 59309, 42731, 49741, 27161, 9580, 35236, 5707, 31819, 15140, 65128, 5572, 61533, 11124, 4947, 19818, 37401, 3109, 64068, 20114, 1535, 35265, 22334, 36746, 66197, 46335, 55202, 25984, 59660, 38125, 11415, 22926, 33354, 8236, 4396, 36447, 83725, 18295, 41651, 3735, 34812, 7883, 45497, 86011, 2221, 59452, 69769, 38431, 12691, 44527, 27146, 39061, 56659, 81761, 6856, 10686, 1306, 38541, 13956, 43446, 42674, 29469, 36702, 65232, 28306, 59084, 615, 72872, 22330, 23177, 44767, 28414, 75805, 15321, 23425, 47913, 80600, 6838, 13840, 64400, 22419, 25936, 5137, 26414, 67988, 17012, 6367, 50533, 3145, 32495, 57545, 3196, 70878, 48543, 15772, 6594, 30187, 65730, 12214, 18033, 31359, 80364, 43848, 8063, 60190, 41320, 31837, 10535, 16760, 6950, 31338, 60087, 66579, 27697, 5920, 40585, 47208, 66620, 24543, 19693, 36522, 1900, 66032, 6676, 11694, 988, 93205, 19276, 31338, 11400, 59409, 11906, 47637, 39053, 79541, 87796, 6930, 49093, 36907, 60688, 44238, 576, 15446, 55271, 37704, 12097, 2883, 70303, 35309, 7141, 18631, 45922, 39949, 15742, 56164, 16396, 383, 7215, 9486, 5123, 10965, 13741, 22543, 11584, 32138, 60911, 35918, 9668, 38216, 2529, 28930, 29612, 5511, 38436, 68059, 68669, 36931, 80961, 67001, 30129, 20255, 37935, 16302, 31736, 45344, 23124, 16440, 27225, 18796, 30816, 22912, 80463, 5204, 49198, 36179, 7148, 7334, 44492, 70426, 42337, 80130, 24545, 19283, 13241, 26112, 40966, 18005, 1380, 56979, 43108, 72057, 45069, 6097, 11024, 44698, 10784, 22663, 74041, 9559, 64240, 4482, 72325, 46261, 52849, 79474, 20446, 42122, 63795, 6313, 61410, 12853, 13354, 65059, 4547, 61469, 4633, 59117, 40344, 16458, 18314, 80155, 3663, 65701, 2518, 75762, 82592, 13789, 16652, 73193, 19348, 30073, 20344, 46814, 84138, 23317, 6294, 18023, 26560, 24641, 63593, 76985, 11148, 54083, 52131, 4326, 21462, 25579, 17331, 39142, 71281, 69345, 30160, 63079, 19139, 48259, 15542, 12858, 8941, 53613, 48668, 12650, 42451, 13899, 6560, 27971, 8633, 60019, 45647, 12877, 73181, 1991, 73421, 35045, 548, 56911, 35389, 3420, 47725, 2890, 12427, 55417, 54287, 75214, 73189, 52791, 24955, 47780, 40588, 19126, 50442, 72797, 58354, 44229, 26864, 68521, 43124, 19190, 54630, 4740, 70660, 18615, 34286, 19703, 34125, 52408, 64195, 54008, 32666, 13785, 1630, 89786, 44151, 28749, 5375, 47693, 51350, 1022, 28566, 68565, 39873, 31063, 7798, 77573, 50070, 78575, 54995, 23822, 55319, 47515, 7692, 37986, 38924, 61973, 66647, 59472, 66265, 67764, 51084, 276, 3103, 10747, 31275, 51727, 4926, 53515, 34509, 3756, 8312, 17980, 54885, 88954, 18724, 18249, 11567, 1755, 84950, 24100, 54393, 25942, 33041, 43744, 50068, 45076, 69247, 6625, 23541, 68, 35894, 15343, 32120, 68672, 7078, 6559, 71732, 75227, 6177, 19504, 33895, 39051, 2409, 66238, 12011, 34324, 52900, 67682, 51554, 18489, 17541, 55738, 51742, 12683, 33155, 11449, 24650, 48053, 16354, 42902, 59742, 4831, 49400, 1865, 26965, 84788, 603, 64783, 25161, 9773, 37655, 76082, 11354, 2557, 75182, 39088, 22619, 15876, 28955, 57774, 544, 8983, 4602, 67452, 13441, 4857, 70332, 45737, 25545, 86613, 77305, 29482, 55550, 47337, 42797, 45184, 67110, 18686, 34927, 50586, 52376, 71143, 4030, 95734, 28199, 21226, 16779, 43940, 127, 23629, 10853, 9684, 7881, 19233, 46190, 66507, 9286, 3658, 2861, 11305, 70904, 45869, 4564, 4520, 24930, 25789, 61963, 37856, 14733, 15961, 77744, 11459, 26444, 1802, 551, 22148, 14304, 62459, 2890, 87520, 34375, 30799, 34758, 61835, 72940, 61305, 70056, 63497, 657, 50669, 38696, 6700, 55960, 7412, 19607, 12750, 11872, 24063, 68039, 80192, 86129, 472, 23169, 30053, 12411, 3400, 17596, 39328, 5549, 35297, 38703, 18999, 20741, 71480, 8946, 6878, 55552, 1730, 57210, 71211, 27798, 58222, 29002, 43918, 15061, 59790, 1251, 16177, 64344, 13014, 31271, 11544, 62840, 1439, 32224, 23295, 9477, 54655, 49289, 51300, 73964, 16723, 26958, 12289, 53809, 2232, 41104, 77496, 10790, 7491, 24642, 26989, 73315, 11212, 1334, 11992, 37519, 3254, 21588, 3171, 26006, 41966, 9349, 10840, 38569, 10886, 7433, 53898, 33047, 31845, 70786, 46804, 23473, 72309, 72322, 16269, 4873, 9506, 61914, 86965, 37988, 76772, 37524, 15943, 4311, 14164, 32780, 2621, 33112, 9704, 64877, 764, 21989, 2018, 21882, 7365, 37871, 20235, 19576, 82421, 15116, 23508, 18825, 39635, 43338, 29793, 51368, 27126, 42724, 62298, 20068, 38071, 92315, 40185, 70872, 2916, 20122, 831, 85065, 782, 88658, 12429, 10946, 52630, 68802, 56892, 70897, 30024, 28353, 68393, 43890, 24409, 64221, 56615, 68591, 25526, 62491, 1943, 30723, 29637, 14167, 32384, 9723, 48474, 62478, 22547, 9215, 31693, 11714, 32645, 8652, 15709, 1793, 6498, 4811, 57354, 21133, 2826, 55115, 26069, 44717, 14232, 66286, 37636, 44007, 77261, 79816, 90940, 1798, 34266, 71436, 33425, 15963, 19105, 7240, 50618, 56538, 22606, 61525, 6729, 15253, 17921, 20389, 12072, 1885, 53476, 13385, 33439, 75844, 17462, 75159, 78567, 22272, 1115, 38232, 6151, 1286, 9686, 2263, 29746, 9122, 26517, 80304, 927, 28874, 28985, 25093, 2486, 63857, 49891, 35397, 2357, 51887, 45218, 40374, 48618, 51688, 44360, 50057, 28719, 20884, 68797, 2095, 79860, 61339, 41430, 12135, 33864, 5249, 24504, 3795, 6116, 61613, 31674, 2651, 32102, 68590, 34900, 66159, 3903, 44962, 28832, 7826, 23848, 23488, 35840, 32608, 9403, 25144, 40417, 42004, 11021, 13807, 61722, 69409, 34727, 3172, 13773, 36171, 27017, 20896, 62169, 2341, 22753, 10969, 39253, 10762, 4251, 9321, 2387, 46232, 33224, 37090, 71076, 8058, 34533, 25161, 54770, 38235, 29584, 61111, 22747, 2315, 5176, 69971, 9182, 23452, 35665, 72659, 64483, 72201, 31763, 41596, 25642, 36548, 28299, 27248, 26549, 74851, 63466, 60848, 12995, 28174, 40995, 78231, 89584, 46050, 6281, 67405, 81994, 69340, 31821, 37528, 13857, 30465, 42727, 9229, 57646, 47671, 9227, 16103, 4619, 31236, 28346, 27270, 34946, 53302, 50685, 5750, 71712, 80014, 66861, 63094, 41051, 35971, 6294, 36366, 18303, 41105, 86688, 80087, 8439, 81779, 48488, 7172, 4370, 27539, 78290, 82362, 6710, 6835, 17383, 39197, 36283, 65190, 15573, 40718, 13508, 18984, 7327, 69671, 22279, 51426, 25129, 32525, 9158, 7286, 43970, 8822, 20525, 14160, 25942, 34926, 7194, 57262, 2925, 21238, 44248, 4190, 17564, 53062, 68890, 49565, 56548, 6422, 9481, 30905, 42074, 57928, 3477, 24602, 44810, 25091, 45761, 77711, 39841, 76647, 21789, 6601, 3061, 34666, 4017, 2288, 11763, 75507, 10237, 27248, 10343, 13510, 15579, 44318, 48467, 28168, 84882, 74918, 35597, 36186, 33507, 61372, 78934, 21498, 24596, 43370, 13526, 13398, 66299, 4323, 40814, 16779, 31890, 7042, 15470, 56364, 35945, 39717, 21676, 6838, 47416, 72819, 18851, 3532, 42358, 29413, 2267, 15774, 49105, 41043, 16085, 21760, 30107, 12544, 6617, 48267, 3775, 9897, 74011, 33886, 18589, 31487, 17465, 13193, 39321, 30462, 75830, 16158, 21221, 84382, 13702, 9771, 87054, 48452, 20473, 57757, 20768, 28867, 7565, 16633, 77049, 11419, 37034, 25242, 18169, 1482, 1180, 8464, 9582, 4068, 57825, 34575, 8399, 13060, 30659, 30252, 6534, 33753, 31705, 7805, 33005, 70355, 80025, 73115, 8932, 11636, 6593, 37852, 91215, 72982, 78071, 52806, 21175, 23534, 41708, 47670, 35778, 46880};
			int expected__            = 2;

			std::clock_t start__      = std::clock();
			int received__            = DrivingPlans().count(N, vector <int>(A, A + (sizeof A / sizeof A[0])), vector <int>(B, B + (sizeof B / sizeof B[0])), vector <int>(C, C + (sizeof C / sizeof C[0])));
			return verify_case(casenum__, expected__, received__, clock()-start__);
		}
      case 5: {
			int N                     = 6;
			int A[]                   = {1, 2, 2, 3, 3, 4, 5};
			int B[]                   = {2, 3, 4, 4, 5, 5, 6};
			int C[]                   = {1, 1, 1, 1, 1, 1, 1};
			int expected__            = 2;

			std::clock_t start__      = std::clock();
			int received__            = DrivingPlans().count(N, vector <int>(A, A + (sizeof A / sizeof A[0])), vector <int>(B, B + (sizeof B / sizeof B[0])), vector <int>(C, C + (sizeof C / sizeof C[0])));
			return verify_case(casenum__, expected__, received__, clock()-start__);
		}
		default:
			return -1;
		}
	}
}


#include <cstdlib>
int main(int argc, char *argv[]) {
	if (argc == 1) {
		moj_harness::run_test();
	} else {
		for (int i=1; i<argc; ++i)
			moj_harness::run_test(std::atoi(argv[i]));
	}
	return 0;
}
// END CUT HERE
