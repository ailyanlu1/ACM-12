sjtu:
	KM
	HopcroftKarp			(_1)
	一般图最大匹配_片段		(_1, OK)
	费用流(zkw)			(_1)
	无向图最小割()			(_1, _POJ2914 && HDU4654)
	有向图最小生成树		(_1)
	最大团搜索算法			(_1, OK)
	极大团的计数			(_1)
	弦图的完美消除序列		(_1, )
	字符串最小表示法		(_1, OK)
	Manacher			(_1, OK)
	ExtKmp				(_1, OK)
	SA				(_1, OK)
	Exact Cover(精确覆盖)		(_1, OK)
	网络流拓展:			(_1, OK)
		有上下界网络流，可行流增广的流量不是实际流量。若要求实际流量应该强算一遍源点出去的流量。
		求最小下届网络流：	
			方法一：加t-s的无穷大流，求可行流，然后把边反向后（减去下届网络流），在残留网络中从汇到源做最大流。
			方法二：在求可行流的时候，不加从汇到源的无穷大边，得到最大流X， 加上从汇到源无穷大边后，再求最大流得到Y。那么Y即是答案最小下届网络流。

B[u,v]表示(u,v)流量的下限，C[u,v]表示(u,v)流量的上限, F[u,v]表示(u,v)的流量,
g[u,v]表示F[u,v]-B[u,v] 显然 0<=g[u,v]<=C[u,v]-B[u,v] 

1.无源汇上下界可行流:
添加附加源汇S,T 对于某边 (u,v) 在新网络中连边S->v容量B[u,v],u->T容量B[u,v],u->v容量C[u,v]-B[u,v].最后,一样也是求一下新网络的最大流,判断从附加源点的边,是否都满流即可.求具体的解:根据最前面提出的强制转换方式,边(u,v)的最终解中的实际流量即为g[u,v]+B[u,v]
2.有源汇上下界可行流
从汇点到源点连一条上限为INF,下限为0的边.按照1.无源汇的上下界可行流一样做即可.改成无源汇后,求的可行流是类似环的,流量即T->S边上的流量.这样做显然使S,T也变得流量平衡了.
3.有源汇的上下界最大流
方法一 :2.有源汇上下界可行流中,从汇点到源点的边改为连一条上限为INF,下限为x的边.因为显然x>ans即MIN(T->S )> MAX(S->T),会使求新网络的无源汇可行流无解的（S,T流量怎样都不能平衡）而x<=ans会有解.所以满足二分性质,二分x,最大的x使得新网络有解的即是所求答案原图最大流.
方法二:从汇点T到源点S连一条上限为INF,下限为0的边,变成无源汇的网络.照求无源汇可行流的方法(如1)，建附加源点S'与汇点T',求一遍S'->T‘的最大流.再把从汇点T到源点S的这条边拆掉.求一次从S到T的最大流即可.(关于S',T'的边好像可以不拆?)(这样一定满足流量平衡?)表示这方法我也没有怎么理解.
4.有源汇的上下界最小流
方法一:2.有源汇上下界可行流中,从汇点到源点的边改为连一条上限为x,下限为0的边.与3同理,二分上限,最小的x使新网络无源汇可行流有解,即是所求答案原图最小流.



needed:
	匈牙利
	朴素最小费用最大流
	tarjan(有向图,边双)
	次短路(K短路)
	有向图拓扑排序计数(树)
	2-SAT(原理,可行性,任一解,字典序最小解)
	生成树相关(斯坦纳,度限制,最优比例,计数)

	dinic(部分代码)			(_1, OK)
	tarjan(点双(关键代码))		(_1, OK)
	混合欧拉回路判定(tips)		(_1, OK)
	RMQ(getmin tips)		(_1, OK)
	LCA(倍增,tarjan(关键代码))	(_1, OK)
	稳定婚姻(关键代码)		(_1, OK)
	树的Hash判定同构(tips)		(_1, OK)

	KMP(getnext, tips)
	AC自动机(关键代码)		(_1, OK)

	.vimrc				(_1)
	head



/* 相关定义 //
1. 极大团：此团不是其他团的子集
2. 最大团：点数最多的团 -> 团数
3. 最小染色：用最少的颜色给点染色使相邻点颜色不同 -> 色数
4. 最大独立集：原图点集的子集，任意两点在原图中没有边相连
6. 最小团覆盖：用最少个数的团覆盖所有的点
   推论 -> 团数<=色数，最大独立集数<=最小团覆盖数
6.弦图：图中任意长度大于3的环都至少有1个弦
   推论 -> 弦图的每一个诱导子图一定是弦图
           弦图的任一个诱导子图不同构于Cn(n>3)
7.单纯点：记N(v)为点v相邻点的集合，若N(v)+{v}是一个团，则v为单纯点
   引理 -> 任何一个弦图都至少有一个单纯点
           不是完全图的弦图至少有两个不相邻的单纯
8.弦图最多有n个极大团.
9.设next(v) 表示N(v)中最前的点.令w*表示所有满足A∈B的w中最后的一个点.判断v∪N(v)是否为极大团,只需判断是否存在一个w,满足Next(w) = v且|N(v)| + 1 ≤ |N(w)|即可.
10.完美消除序列：点的序列v1,v2,..,vn，满足vi在{vi,vi+1,..,vn}中是单纯点
   定理 -> 一个无向图是弦图，当且仅当它有一个完美消除序列
   构造算法 -> 令cnt[i]为第i个点与多少个已标记的点相邻，初值全为零
               每次选择一个cnt[i]最大的结点并打上标记
               标记顺序的逆序则为完美消除序列
   判定算法 -> 对于每个vi，其出边为vi1,vi2,..,vik
               然后判断vi1与vi2,vi3,..,vik是否都相邻
               若存在不相邻的情况，则说明不是完美消除序列
11.弦图各类算法：
   最小染色：完美消除序列从后往前依次给每个点染色,给每个点染上可以染的最小的颜色.//团数=色数
   最大独立集：完美消除序列从前往后能选就选.
   最小团覆盖：设最大独立集为{p1 , p2 , …, pt},则{p1∪N(p1),  …, pt∪N(pt)}为最小团覆盖.     //最大独立集数 = 最小团覆盖数!!!
12.区间图：坐标轴上的一些区间看作点，任意两个交集非空的区间之间有边
   定理 -> 区间图一定是弦图 */
13.设第i个点在弦图的完美消除序列第p(i)个.令N(v) = {w | w与v相邻且p(w) > p(v)}弦图的极大团一定是v∪N(v)的形式.

